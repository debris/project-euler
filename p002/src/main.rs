//! Even Fibonacci numbers
//! 
//! Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//!
//! 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//!
//! By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

struct Fibonacci {
	a: u64,
	b: u64,
}

fn fibonacci_iter() -> Fibonacci {
	Fibonacci {
		a: 1,
		b: 2,
	}
}

impl Iterator for Fibonacci {
	type Item = u64;

	fn next(&mut self) -> Option<Self::Item> {
		let next = self.a;
		let x = self.a + self.b;
		self.a = self.b;
		self.b = x;
		Some(next)
	}
}

fn even_fibonacci_numbers(range: u64) -> u64 {
	fibonacci_iter().take_while(|&x| x < range).filter(|&x| x % 2 == 0).sum()
}

fn main() {
	println!("{}", even_fibonacci_numbers(4_000_000));
}
